.. _hmis-restserver:fhir_rest_server:

FHIR REST server
================
.. _hmis-restserver:fhir_rest_server-about_fhir_and_rest:

About FHIR and REST
-------------------

**Fast Healthcare Interoperability Resources (FHIR)** is a standard for exchanging healthcare information electronically developed by HL7. For more information about FHIR, please see http://hl7.org/fhir

**Representational State Transfer (REST)** is a software architecture style for scalable web services developed by the W3C Technical Architecture Group (TAG). REST based systems can be accessed over the Hypertext Transfer Protocol (HTTP), the same protocol that is used by Web browsers to request Web pages from and to send data to a Web server. For more information about REST, please see https://en.wikipedia.org/wiki/Representational_state_transfer

.. _hmis-restserver:fhir_rest_server-installation:

Installation
------------

The server requires Flask and a few of its addons. And, of course, a working GNU Health installation.

It is recommended to install the packages into a virtual environment using virtualenv.

Setup the environment (as the gnuhealth user):

.. code-block:: shell
        :linenos:


        $ pip install virtualenv           # Install virtualenv using python (may require root)
        $ cd my_work_folder                     # Wherever you want to put the virtual environment folder
        $ virtualenv -p /usr/bin/python2 venv   # Create the environment, with the Python 2.x interpreter
        $ source venv/bin/activate              # Active the environment

Now install the packages using the requirements file:

.. code-block:: shell
        :linenos:


        $ pip install -r requirements.txt

Some of the packages (like pywebdav) are already installed on the system. However, it’s usually easier to administrate and debug the Flask server when working in a virtual environment.

More help with `virtualenv <http://docs.python-guide.org/en/latest/dev/virtualenvs/>`_.

.. _hmis-restserver:fhir_rest_server-configuration:

Configuration
-------------

The server ships with a simple production config file. However, it needs to be edited.

.. code-block:: 
        :linenos:

        :caption: server/config.py
        
        TRYTON_DATABASE = ''    #. GNU Health database
        SERVER_NAME = ''        #. Domain name of the server (e.g., fhir.example.com)
        SECRET_KEY = ''         #. Set this value to a long and random string

There are other options available for Flask and its addons: 

* `Flask <http://flask.pocoo.org/docs/0.10/config/>`_ 
* `Flask-Login <https://flask-login.readthedocs.org/en/latest/>`_ 
* `Flask-Tryton <https://code.google.com/p/flask-tryton/>`_ 
* `Flask-Restful <http://flask-restful.readthedocs.org/en/latest/quickstart.html>`_ 
* `Flask-WTF <https://flask-wtf.readthedocs.org/en/latest/>`_

.. _hmis-restserver:fhir_rest_server-security:

Security
--------

Use TLS. Sensitive medical information must be protected and confidential.

By default, all FHIR endpoints except the Conformance statement require user authentication. The user authentication and access follows Tryton’s model, respecting model and field access rights.

The same credentials used to sign into GNU Health are used to access the FHIR REST server.

.. _hmis-restserver:fhir_rest_server-running_the_server:

Running the Server
------------------

The server ships with a simple script (:code:`run_server.py`) in the :code:`server/` folder to run the server using `Tornado <http://www.tornadoweb.org/en/stable/>`_.

The script expects itself to be located one directory level above the :code:`server/` folder. Consequently, move the run_server.py script up one directory level. For example:

.. code-block:: shell
        :linenos:


        $ mv /example/base/server/run_server.py /example/base/run_server.py

With the virtual environment activated and as the gnuhealth user, run the server.

.. code-block:: shell
        :linenos:


        $ python run_server.py

However, most production servers use nginx, lighttpd, or apache in front of the Tornado server. For example, a common practice is to have nginx sit in front of multiple Tornado instances, acting as a load balancer, handling SSL, and serving static content (like images and common javascript). How to configure an nginx/lighttpd + tornado + flask setup is beyond this document, although it is not complicated, especially with nginx.

.. _hmis-restserver:fhir_rest_server-troubleshooting:

Troubleshooting
---------------

.. _hmis-restserver:fhir_rest_server-troubleshooting-cannot_connect_to_database:

Cannot connect to database
^^^^^^^^^^^^^^^^^^^^^^^^^^

Make sure you are running as the *gnuhealth* user.

Flask-Tryton should automatically find and parse the Tryton config file. If it is not found:

.. code-block::
        :linenos:

        :caption: server/config.py

        TRYTON_CONFIG = ''      # Set this to the path of the Tryton configuration file (e.g., '/weird/tryton/weird-tryton.conf')

.. _hmis-restserver:fhir_rest_server-troubleshooting-no_database_with_that_name:

No database with that name
^^^^^^^^^^^^^^^^^^^^^^^^^^

This is related to the previous error, and occurs when Flask-Tryton cannot find the Tryton config file. Following the previous procedure should hopefully fix it.